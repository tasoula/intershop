server:
    port: 8080

spring:
    application:
        name: Internet Shop

    sql:
        init:
            mode: always

    r2dbc:
        url: ${INTERSHOP_DB_URL}
        username: ${INTERSHOP_DB_USERNAME}
        password: ${INTERSHOP_DB_PASSWORD}

        pool:
            max-size: 20
            initial-size: 10
            validation-query: SELECT 1 # Проверка доступности соединения

    data:
        redis:
            host: ${REDIS_HOST}
            port: 6379
            cache:
                redis:
                    time-to-live: PT5S    # TTL по умолчанию для кешей

    security:
        oauth2:
            client:
                provider:
                    keycloak:
                        issuer-uri: http://keycloak:8080/realms/master #http://localhost:8082/realms/master # Адрес сервера авторизации для получения токена
                registration:
                    store: # название конкретного клиента
                        # Описание клиента OAuth2
                        provider: keycloak
                        authorizationGrantType: client_credentials
                        client-id: internet-shop
                        client-secret: kBHUpq4qgCG0tIQy78iavvOADBgCoX4o
                    #    scope: profile #нужно (только зачем?) настрить роли, соответствующие scope (в Keycloak в разделе "Clients -> [ваш клиент] -> Roles")
                        clientAuthenticationMethod: client_secret_post # Способ передачи секрета

upload.images.dir: ${UPLOAD_IMAGES_DIR:/app/images}

#logging:
#    level:
    #     org.springframework.r2dbc.core.DefaultDatabaseClient: DEBUG # заодно включим логирование SQL-запросов
    #    io.r2dbc: DEBUG # и добавим больше деталей (не включать в настоящем приложении)
    #    org:
    #        springframework:
    #            data:
    #                redis: DEBUG
    #                security: DEBUG
    #    org.springframework.security: DEBUG


balance:
    service:
        url:  http://${PAYMENT_SERVICE_HOST}:8081


plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.openapi.generator" version "7.12.0"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//tasks.register('buildClient', GenerateTask) {
openApiGenerate{
    generatorName.set("java")
    inputSpec.set("$parent.projectDir/payment-service/src/main/resources/api-spec.yaml")
    outputDir.set("$projectDir/build/generated")
    ignoreFileOverride.set("$parent.projectDir/payment-service/.openapi-generator-java-sources.ignore")
    modelPackage.set("io.github.tasoula.client.domain")
    invokerPackage.set("io.github.tasoula.client")
    apiPackage.set("io.github.tasoula.client.api")
    configOptions.set([
            hideGenerationTimestamp: "true",
            library                : "webclient",
            useJakartaEe           : "true",
            useTags                : "true",
            openApiNullable        : "false",
            serializableModel      : "true"
    ])
}

sourceSets.main.java.srcDir "$projectDir/build/generated/src/main/java"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive' // +
    runtimeOnly 'org.postgresql:r2dbc-postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "org.testcontainers:r2dbc"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty "file.encoding", "UTF-8"
}

tasks.named('compileJava') {
    // dependsOn([tasks.openApiGenerate, tasks.buildClient]) - вот так, если нужно опираться на обе задачи
    dependsOn(tasks.openApiGenerate)
}